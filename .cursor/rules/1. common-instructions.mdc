---
description:
globs:
alwaysApply: true
---

# Agentic AI based on Insurance Policy - ISPL

 This project aims to implement an AI chat service that supports both insurance policy and insurance terms search, along with a management service for handling insurance policies and their associated terms required for data retrieval.

> [!IMPORTANT]
> This document contains global instructions for the ISPL (Insurance Policy) project. The AI must adhere to these instructions as the top priority.
> AI developers must strictly adhere to these instructions.
> The database schema is defined in the PRD document (`Insurance Policy_prd.md` section 7).
> When implementing, create a separate `schema.sql` file based on the PRD specifications.
> **The schema is the finalized data model and must never be modified.** If modification is unavoidable, user approval must be obtained before making any changes.
> **Minimize explanations and focus on the requested task.**
> Temporary files created for tasks will be deleted after task completion.

## 1. Core Principles

- **Language**: All responses and code must be generated in **Korean**. Code comments should also be in Korean as a rule.

**Principles for Preventing Hallucination**
- **No Speculation**: Do not answer based on speculation about unknown or uncertain information.
- **State Limitations**: If an answer is not possible, clearly state the limitation, such as "It is difficult to provide an accurate answer."
- **Suggest Alternatives**: Guide the user to specify their question or suggest other ways to solve the problem.

## 2. Tool Usage

- **Task Management**:
  - For complex tasks, use the `shrimp-task-manager` MCP to plan and manage tasks.
  - When coding based on a PRD, each task must include a step to review the PRD requirements.
- **Learning Latest Information**: If the latest instructions for the tech stack are needed, use the `context7` MCP to learn the relevant information before proceeding with development.
- **Environment**:
  - **Database**: postgreSQL 17.6.

## 3. Server Execution

- **Backend Server**: When running the Python project, use `python main.py` from the project root.
- **Frontend**: When running the React app, use `npm start` from the project root.
 
# Clean Code Guidelines

## Constants Over Magic Numbers
- Replace hard-coded values with named constants
- Use descriptive constant names that explain the value's purpose
- Keep constants at the top of the file or in a dedicated constants file

## Meaningful Names
- Variables, functions, and classes should reveal their purpose
- Names should explain why something exists and how it's used
- Avoid abbreviations unless they're universally understood

## Smart Comments
- Don't comment on what the code does - make the code self-documenting
- Use comments to explain why something is done a certain way
- Document APIs, complex algorithms, and non-obvious side effects

## Single Responsibility
- Each function should do exactly one thing
- Functions should be small and focused
- If a function needs a comment to explain what it does, it should be split

## DRY (Don't Repeat Yourself)
- Extract repeated code into reusable functions
- Share common logic through proper abstraction
- Maintain single sources of truth

## Clean Structure
- Keep related code together
- Organize code in a logical hierarchy
- Use consistent file and folder naming conventions

## Encapsulation
- Hide implementation details
- Expose clear interfaces
- Move nested conditionals into well-named functions

## Code Quality Maintenance
- Refactor continuously
- Fix technical debt early
- Leave code cleaner than you found it

## Testing
- Write tests before fixing bugs
- Keep tests readable and maintainable
- Test edge cases and error conditions

# Code Quality Guidelines

## Verify Information
Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.

## File-by-File Changes
Make changes file by file and give me a chance to spot mistakes.

## No Apologies
Never use apologies.

## No Understanding Feedback
Avoid giving feedback about understanding in comments or documentation.

## No Whitespace Suggestions
Don't suggest whitespace changes.

## No Summaries
Don't summarize changes made.

## No Inventions
Don't invent changes other than what's explicitly requested.

## No Unnecessary Confirmations
Don't ask for confirmation of information already provided in the context.

## Preserve Existing Code
Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.

## Single Chunk Edits
Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.

## No Implementation Checks
Don't ask the user to verify implementations that are visible in the provided context.

## No Unnecessary Updates
Don't suggest updates or changes to files when there are no actual modifications needed.

## Provide Real File Links
Always provide links to the real files, not x.md.

## No Current Implementation
Don't show or discuss the current implementation unless specifically requested.


'------------------'
## No Mock Test
Don't implement mock tests.

## Location of the .env / .gitignore file
The .env and .gitignore files are located in the root folder (ispl3).