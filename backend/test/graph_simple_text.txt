================================================================================
ISPL LangGraph Agent 구조 - 텍스트 버전
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│                         🚀 그래프 실행 흐름                              │
└─────────────────────────────────────────────────────────────────────────┘

    [START]
       │
       │  사용자 질의 입력
       │  예: "암 진단비는 얼마인가요?"
       ↓
  ╔════════════════╗
  ║  ROUTER AGENT  ║  🧭 의도 분류
  ╚════════════════╝
       │
       │  - 질의 분석: 키워드 기반 의도 추출
       │  - 분류: search / upload / manage
       │  - 현재: 모든 질의 → search_agent로 라우팅
       │
       ↓ (Command goto)
  ╔════════════════╗
  ║ SEARCH AGENT   ║  🔍 벡터 검색
  ╚════════════════╝
       │
       │  1. 질의 → 임베딩 변환 (OpenAI text-embedding-3-large)
       │  2. pgvector 코사인 유사도 검색
       │  3. 상위 5개 청크 반환
       │  4. 검색 로그 저장 (search_logs 테이블)
       │
       ↓
  ╔════════════════╗
  ║ ANSWER AGENT   ║  💬 답변 생성
  ╚════════════════╝
       │
       │  1. 검색 결과 컨텍스트 구성
       │  2. GPT-4 프롬프트 생성
       │     - 할루시네이션 방지 지침
       │     - 검색 결과 기반 답변 요구
       │  3. 최종 답변 생성
       │
       ↓
    [END]
       │
       │  최종 상태 반환:
       │  - final_answer: 생성된 답변
       │  - search_results: 검색된 청크들
       │  - task_results: 각 Agent 실행 결과


================================================================================
State 관리 (ISPLState)
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│ messages          : list    # LangGraph 메시지 이력                      │
│ next_agent        : str     # 다음 실행할 Agent                          │
│ task_type         : str     # 작업 유형 (search/upload/manage)           │
│ task_results      : dict    # 각 Agent의 실행 결과 (merge_dicts reducer) │
│ query             : str     # 사용자 질의                                │
│ search_results    : list    # 검색 결과 청크들                           │
│ final_answer      : str     # 최종 답변                                  │
│ error             : str     # 오류 정보 (있을 경우)                       │
└─────────────────────────────────────────────────────────────────────────┘


================================================================================
Agent 상세 설명
================================================================================

📍 ROUTER AGENT (router_node)
─────────────────────────────
  위치: backend/agents/router_agent.py
  
  기능:
    • 사용자 질의의 의도를 분류
    • 적절한 Agent로 라우팅 결정
    
  분류 키워드:
    - search: "검색", "찾아", "알려줘", "뭐야", "궁금", "조회"
    - upload: "업로드", "등록", "추가", "새로운 약관"
    - manage: "관리", "목록", "삭제", "다운로드"
  
  현재 상태:
    → upload, manage는 미구현
    → 모든 질의를 search_agent로 전달
  
  출력:
    Command(goto="search_agent", update={...})


📍 SEARCH AGENT (search_node)
─────────────────────────────
  위치: backend/agents/search_agent.py
  
  기능:
    • VectorSearchService 호출
    • 벡터 검색 수행
    • 검색 로그 저장
  
  검색 파라미터:
    - threshold: 0.7 (유사도 임계값)
    - limit: 5 (반환 결과 수)
    - embedding_model: text-embedding-3-large (1536차원)
  
  데이터베이스:
    - 테이블: document_chunks (pgvector HNSW 인덱스)
    - 연산: 코사인 유사도 (<=> 연산자)
  
  출력:
    {
      "search_results": [...],
      "task_results": {"search": {...}},
      "next_agent": "answer_agent"
    }


📍 ANSWER AGENT (answer_node)
─────────────────────────────
  위치: backend/agents/answer_agent.py
  
  기능:
    • 검색 결과 기반 답변 생성
    • GPT-4 호출 (gpt-4-turbo-preview)
    • 할루시네이션 방지
  
  프롬프트 구조:
    [시스템]
    - 보험약관 전문가 페르소나
    - 검색 결과만 사용
    - 불확실하면 "모르겠습니다" 답변
    
    [사용자]
    - 검색된 청크 내용 제공
    - 출처 정보 (문서명, 페이지, 섹션)
    - 사용자 질의
  
  GPT-4 설정:
    - temperature: 0.1 (정확성 우선)
    - max_tokens: 1000
  
  출력:
    {
      "final_answer": "...",
      "task_results": {"answer": {...}}
    }


================================================================================
데이터베이스 연동
================================================================================

검색 로그 (search_logs 테이블):
  - 모든 검색 기록 저장
  - 유사도 점수, 응답 시간 기록
  - 사용자 피드백 수집 준비

벡터 인덱스 (document_chunks):
  - pgvector HNSW 인덱스
  - 1536차원 벡터
  - 코사인 유사도 검색


================================================================================
확장 계획
================================================================================

🔜 Upload Agent (미구현)
  - PDF 파일 업로드
  - 텍스트 추출 및 청킹
  - 임베딩 생성 및 저장

🔜 Manage Agent (미구현)
  - 문서 목록 조회
  - 문서 삭제
  - 문서 메타데이터 수정

================================================================================

